package web

import (
	"context"
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"

	"detectviz-platform/pkg/domain/interfaces/plugins"
	"detectviz-platform/pkg/platform/contracts"
)

// AuthUIPagePlugin ÂØ¶Áèæ‰∫ÜÁî®Êà∂ÁôªÈåÑÂíåË®ªÂÜäÁöÑ Web UI È†ÅÈù¢
// ËÅ∑Ë≤¨: Êèê‰æõÁî®Êà∂Ë∫´‰ªΩÈ©óË≠âÁõ∏ÈóúÁöÑ Web ÁïåÈù¢
type AuthUIPagePlugin struct {
	logger       contracts.Logger
	authProvider contracts.AuthProvider
	config       AuthUIConfig
}

// AuthUIConfig ÂÆöÁæ©Ë™çË≠â UI È†ÅÈù¢ÁöÑÈÖçÁΩÆ
type AuthUIConfig struct {
	LoginRoute    string `yaml:"login_route" json:"login_route"`
	RegisterRoute string `yaml:"register_route" json:"register_route"`
	LogoutRoute   string `yaml:"logout_route" json:"logout_route"`
	Title         string `yaml:"title" json:"title"`
	BrandName     string `yaml:"brand_name" json:"brand_name"`
}

// NewAuthUIPagePlugin ÂâµÂª∫Êñ∞ÁöÑË™çË≠â UI È†ÅÈù¢Êèí‰ª∂ÂØ¶‰æã
func NewAuthUIPagePlugin(authProvider contracts.AuthProvider, logger contracts.Logger) plugins.UIPagePlugin {
	config := AuthUIConfig{
		LoginRoute:    "/auth/login",
		RegisterRoute: "/auth/register",
		LogoutRoute:   "/auth/logout",
		Title:         "Detectviz Âπ≥Âè∞ - Áî®Êà∂Ë™çË≠â",
		BrandName:     "Detectviz",
	}

	logger.Info("ÂàùÂßãÂåñË™çË≠â UI È†ÅÈù¢Êèí‰ª∂",
		"login_route", config.LoginRoute,
		"register_route", config.RegisterRoute)

	return &AuthUIPagePlugin{
		logger:       logger,
		authProvider: authProvider,
		config:       config,
	}
}

func (a *AuthUIPagePlugin) GetName() string {
	return "auth_ui_page"
}

// Init Êèí‰ª∂ÂàùÂßãÂåñ
func (a *AuthUIPagePlugin) Init(ctx context.Context, cfg map[string]interface{}) error {
	a.logger.Info("ÂàùÂßãÂåñË™çË≠â UI È†ÅÈù¢Êèí‰ª∂")

	// Ëß£ÊûêÈÖçÁΩÆ
	if loginRoute, ok := cfg["login_route"].(string); ok {
		a.config.LoginRoute = loginRoute
	}
	if registerRoute, ok := cfg["register_route"].(string); ok {
		a.config.RegisterRoute = registerRoute
	}
	if title, ok := cfg["title"].(string); ok {
		a.config.Title = title
	}
	if brandName, ok := cfg["brand_name"].(string); ok {
		a.config.BrandName = brandName
	}

	return nil
}

// Start Êèí‰ª∂ÂïüÂãï
func (a *AuthUIPagePlugin) Start(ctx context.Context) error {
	a.logger.Info("ÂïüÂãïË™çË≠â UI È†ÅÈù¢Êèí‰ª∂")
	return nil
}

// Stop Êèí‰ª∂ÂÅúÊ≠¢
func (a *AuthUIPagePlugin) Stop(ctx context.Context) error {
	a.logger.Info("ÂÅúÊ≠¢Ë™çË≠â UI È†ÅÈù¢Êèí‰ª∂")
	return nil
}

// GetRoute ËøîÂõû‰∏ªË¶ÅÁöÑÁôªÈåÑÈ†ÅÈù¢Ë∑ØÁî±
func (a *AuthUIPagePlugin) GetRoute() string {
	return a.config.LoginRoute
}

// GetHTMLContent ËøîÂõûÁôªÈåÑÈ†ÅÈù¢ÁöÑ HTML ÂÖßÂÆπ
func (a *AuthUIPagePlugin) GetHTMLContent() string {
	return a.generateLoginPageHTML()
}

// RegisterRoute Ë®ªÂÜäÊâÄÊúâË™çË≠âÁõ∏ÈóúÁöÑË∑ØÁî±
func (a *AuthUIPagePlugin) RegisterRoute(router interface{}, logger interface{}) error {
	echoRouter, ok := router.(*echo.Echo)
	if !ok {
		return fmt.Errorf("expected *echo.Echo, got %T", router)
	}

	// Ë®ªÂÜäÁôªÈåÑÈ†ÅÈù¢
	echoRouter.GET(a.config.LoginRoute, a.handleLoginPage)
	echoRouter.POST(a.config.LoginRoute, a.handleLoginSubmit)

	// Ë®ªÂÜäË®ªÂÜäÈ†ÅÈù¢
	echoRouter.GET(a.config.RegisterRoute, a.handleRegisterPage)
	echoRouter.POST(a.config.RegisterRoute, a.handleRegisterSubmit)

	// Ë®ªÂÜäÁôªÂá∫ËôïÁêÜ
	echoRouter.POST(a.config.LogoutRoute, a.handleLogout)

	a.logger.Info("Ë™çË≠âË∑ØÁî±Ë®ªÂÜäÂÆåÊàê",
		"login_route", a.config.LoginRoute,
		"register_route", a.config.RegisterRoute,
		"logout_route", a.config.LogoutRoute)

	return nil
}

// handleLoginPage ËôïÁêÜÁôªÈåÑÈ†ÅÈù¢Ë´ãÊ±Ç
func (a *AuthUIPagePlugin) handleLoginPage(c echo.Context) error {
	html := a.generateLoginPageHTML()
	return c.HTML(http.StatusOK, html)
}

// handleLoginSubmit ËôïÁêÜÁôªÈåÑË°®ÂñÆÊèê‰∫§
func (a *AuthUIPagePlugin) handleLoginSubmit(c echo.Context) error {
	username := c.FormValue("username")
	password := c.FormValue("password")

	if username == "" || password == "" {
		return c.HTML(http.StatusBadRequest, a.generateLoginPageHTML("Áî®Êà∂ÂêçÂíåÂØÜÁ¢º‰∏çËÉΩÁÇ∫Á©∫"))
	}

	// ‰ΩøÁî®Ë™çË≠âÊèê‰æõËÄÖÈ©óË≠âÁî®Êà∂
	credentials := fmt.Sprintf("%s:%s", username, password)
	userID, err := a.authProvider.Authenticate(c.Request().Context(), credentials)
	if err != nil {
		a.logger.Warn("Áî®Êà∂ÁôªÈåÑÂ§±Êïó", "username", username, "error", err)
		return c.HTML(http.StatusUnauthorized, a.generateLoginPageHTML("Áî®Êà∂ÂêçÊàñÂØÜÁ¢ºÈåØË™§"))
	}

	a.logger.Info("Áî®Êà∂ÁôªÈåÑÊàêÂäü", "username", username, "user_id", userID)

	// Ë®≠ÁΩÆÊúÉË©±Êàñ JWT tokenÔºàÁ∞°ÂåñÂØ¶ÁèæÔºâ
	// Âú®ÂØ¶ÈöõÂØ¶Áèæ‰∏≠ÔºåÈÄôË£°ÊáâË©≤Ë®≠ÁΩÆÈÅ©Áï∂ÁöÑÊúÉË©±ÁÆ°ÁêÜ
	c.SetCookie(&http.Cookie{
		Name:     "user_id",
		Value:    userID,
		Path:     "/",
		HttpOnly: true,
		MaxAge:   3600, // 1Â∞èÊôÇ
	})

	// ÈáçÂÆöÂêëÂà∞‰∏ªÈ†Å
	return c.Redirect(http.StatusFound, "/ui/hello")
}

// handleRegisterPage ËôïÁêÜË®ªÂÜäÈ†ÅÈù¢Ë´ãÊ±Ç
func (a *AuthUIPagePlugin) handleRegisterPage(c echo.Context) error {
	html := a.generateRegisterPageHTML()
	return c.HTML(http.StatusOK, html)
}

// handleRegisterSubmit ËôïÁêÜË®ªÂÜäË°®ÂñÆÊèê‰∫§
func (a *AuthUIPagePlugin) handleRegisterSubmit(c echo.Context) error {
	username := c.FormValue("username")
	password := c.FormValue("password")
	confirmPassword := c.FormValue("confirm_password")
	email := c.FormValue("email")

	// Âü∫Êú¨È©óË≠â
	if username == "" || password == "" || email == "" {
		return c.HTML(http.StatusBadRequest, a.generateRegisterPageHTML("ÊâÄÊúâÂ≠óÊÆµÈÉΩÊòØÂøÖÂ°´ÁöÑ"))
	}

	if password != confirmPassword {
		return c.HTML(http.StatusBadRequest, a.generateRegisterPageHTML("ÂØÜÁ¢ºÁ¢∫Ë™ç‰∏çÂåπÈÖç"))
	}

	// Âú®ÂØ¶ÈöõÂØ¶Áèæ‰∏≠ÔºåÈÄôË£°ÊáâË©≤Ë™øÁî®Áî®Êà∂Ë®ªÂÜäÊúçÂãô
	// ÁõÆÂâçÁ∞°ÂåñÁÇ∫Áõ¥Êé•ËøîÂõûÊàêÂäüÊ∂àÊÅØ
	a.logger.Info("Áî®Êà∂Ë®ªÂÜäË´ãÊ±Ç", "username", username, "email", email)

	successHTML := a.generateRegisterSuccessHTML(username)
	return c.HTML(http.StatusOK, successHTML)
}

// handleLogout ËôïÁêÜÁôªÂá∫Ë´ãÊ±Ç
func (a *AuthUIPagePlugin) handleLogout(c echo.Context) error {
	// Ê∏ÖÈô§ÊúÉË©± cookie
	c.SetCookie(&http.Cookie{
		Name:     "user_id",
		Value:    "",
		Path:     "/",
		HttpOnly: true,
		MaxAge:   -1, // Âà™Èô§ cookie
	})

	a.logger.Info("Áî®Êà∂ÁôªÂá∫")
	return c.Redirect(http.StatusFound, a.config.LoginRoute)
}

// generateLoginPageHTML ÁîüÊàêÁôªÈåÑÈ†ÅÈù¢ HTML
func (a *AuthUIPagePlugin) generateLoginPageHTML(errorMsg ...string) string {
	errorSection := ""
	if len(errorMsg) > 0 && errorMsg[0] != "" {
		errorSection = fmt.Sprintf(`
		<div class="error-message">
			<p>%s</p>
		</div>`, errorMsg[0])
	}

	return fmt.Sprintf(`
<!DOCTYPE html>
<html lang="zh-TW">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>%s - ÁôªÈåÑ</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%%, #764ba2 100%%);
            margin: 0;
            padding: 20px;
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        .auth-container {
            background: white;
            border-radius: 15px;
            padding: 40px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            width: 100%%;
            max-width: 400px;
        }
        .logo {
            text-align: center;
            font-size: 2.5em;
            color: #667eea;
            margin-bottom: 10px;
        }
        .brand-name {
            text-align: center;
            font-size: 1.8em;
            color: #333;
            margin-bottom: 30px;
            font-weight: 300;
        }
        .form-group {
            margin-bottom: 20px;
        }
        label {
            display: block;
            margin-bottom: 8px;
            color: #555;
            font-weight: 500;
        }
        input[type="text"], input[type="password"], input[type="email"] {
            width: 100%%;
            padding: 12px;
            border: 2px solid #e1e1e1;
            border-radius: 8px;
            font-size: 16px;
            transition: border-color 0.3s;
            box-sizing: border-box;
        }
        input[type="text"]:focus, input[type="password"]:focus, input[type="email"]:focus {
            outline: none;
            border-color: #667eea;
        }
        .submit-btn {
            width: 100%%;
            padding: 12px;
            background: #667eea;
            color: white;
            border: none;
            border-radius: 8px;
            font-size: 16px;
            cursor: pointer;
            transition: background 0.3s;
        }
        .submit-btn:hover {
            background: #5a67d8;
        }
        .error-message {
            background: #fed7d7;
            color: #c53030;
            padding: 12px;
            border-radius: 8px;
            margin-bottom: 20px;
            border: 1px solid #feb2b2;
        }
        .auth-links {
            text-align: center;
            margin-top: 20px;
        }
        .auth-links a {
            color: #667eea;
            text-decoration: none;
        }
        .auth-links a:hover {
            text-decoration: underline;
        }
    </style>
</head>
<body>
    <div class="auth-container">
        <div class="logo">üîç</div>
        <div class="brand-name">%s</div>
        
        %s
        
        <form method="POST" action="%s">
            <div class="form-group">
                <label for="username">Áî®Êà∂Âêç</label>
                <input type="text" id="username" name="username" required>
            </div>
            
            <div class="form-group">
                <label for="password">ÂØÜÁ¢º</label>
                <input type="password" id="password" name="password" required>
            </div>
            
            <button type="submit" class="submit-btn">ÁôªÈåÑ</button>
        </form>
        
        <div class="auth-links">
            <p>ÈÇÑÊ≤íÊúâÂ∏≥ËôüÔºü <a href="%s">Á´ãÂç≥Ë®ªÂÜä</a></p>
        </div>
    </div>
</body>
</html>`, a.config.Title, a.config.BrandName, errorSection, a.config.LoginRoute, a.config.RegisterRoute)
}

// generateRegisterPageHTML ÁîüÊàêË®ªÂÜäÈ†ÅÈù¢ HTML
func (a *AuthUIPagePlugin) generateRegisterPageHTML(errorMsg ...string) string {
	errorSection := ""
	if len(errorMsg) > 0 && errorMsg[0] != "" {
		errorSection = fmt.Sprintf(`
		<div class="error-message">
			<p>%s</p>
		</div>`, errorMsg[0])
	}

	return fmt.Sprintf(`
<!DOCTYPE html>
<html lang="zh-TW">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>%s - Ë®ªÂÜä</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%%, #764ba2 100%%);
            margin: 0;
            padding: 20px;
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        .auth-container {
            background: white;
            border-radius: 15px;
            padding: 40px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            width: 100%%;
            max-width: 400px;
        }
        .logo {
            text-align: center;
            font-size: 2.5em;
            color: #667eea;
            margin-bottom: 10px;
        }
        .brand-name {
            text-align: center;
            font-size: 1.8em;
            color: #333;
            margin-bottom: 30px;
            font-weight: 300;
        }
        .form-group {
            margin-bottom: 20px;
        }
        label {
            display: block;
            margin-bottom: 8px;
            color: #555;
            font-weight: 500;
        }
        input[type="text"], input[type="password"], input[type="email"] {
            width: 100%%;
            padding: 12px;
            border: 2px solid #e1e1e1;
            border-radius: 8px;
            font-size: 16px;
            transition: border-color 0.3s;
            box-sizing: border-box;
        }
        input[type="text"]:focus, input[type="password"]:focus, input[type="email"]:focus {
            outline: none;
            border-color: #667eea;
        }
        .submit-btn {
            width: 100%%;
            padding: 12px;
            background: #667eea;
            color: white;
            border: none;
            border-radius: 8px;
            font-size: 16px;
            cursor: pointer;
            transition: background 0.3s;
        }
        .submit-btn:hover {
            background: #5a67d8;
        }
        .error-message {
            background: #fed7d7;
            color: #c53030;
            padding: 12px;
            border-radius: 8px;
            margin-bottom: 20px;
            border: 1px solid #feb2b2;
        }
        .auth-links {
            text-align: center;
            margin-top: 20px;
        }
        .auth-links a {
            color: #667eea;
            text-decoration: none;
        }
        .auth-links a:hover {
            text-decoration: underline;
        }
    </style>
</head>
<body>
    <div class="auth-container">
        <div class="logo">üîç</div>
        <div class="brand-name">%s</div>
        
        %s
        
        <form method="POST" action="%s">
            <div class="form-group">
                <label for="username">Áî®Êà∂Âêç</label>
                <input type="text" id="username" name="username" required>
            </div>
            
            <div class="form-group">
                <label for="email">ÈõªÂ≠êÈÉµ‰ª∂</label>
                <input type="email" id="email" name="email" required>
            </div>
            
            <div class="form-group">
                <label for="password">ÂØÜÁ¢º</label>
                <input type="password" id="password" name="password" required>
            </div>
            
            <div class="form-group">
                <label for="confirm_password">Á¢∫Ë™çÂØÜÁ¢º</label>
                <input type="password" id="confirm_password" name="confirm_password" required>
            </div>
            
            <button type="submit" class="submit-btn">Ë®ªÂÜä</button>
        </form>
        
        <div class="auth-links">
            <p>Â∑≤ÊúâÂ∏≥ËôüÔºü <a href="%s">Á´ãÂç≥ÁôªÈåÑ</a></p>
        </div>
    </div>
</body>
</html>`, a.config.Title, a.config.BrandName, errorSection, a.config.RegisterRoute, a.config.LoginRoute)
}

// generateRegisterSuccessHTML ÁîüÊàêË®ªÂÜäÊàêÂäüÈ†ÅÈù¢ HTML
func (a *AuthUIPagePlugin) generateRegisterSuccessHTML(username string) string {
	return fmt.Sprintf(`
<!DOCTYPE html>
<html lang="zh-TW">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>%s - Ë®ªÂÜäÊàêÂäü</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%%, #764ba2 100%%);
            margin: 0;
            padding: 20px;
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        .success-container {
            background: white;
            border-radius: 15px;
            padding: 40px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            width: 100%%;
            max-width: 400px;
            text-align: center;
        }
        .success-icon {
            font-size: 4em;
            color: #48bb78;
            margin-bottom: 20px;
        }
        .success-title {
            font-size: 1.8em;
            color: #333;
            margin-bottom: 20px;
        }
        .success-message {
            color: #666;
            margin-bottom: 30px;
            line-height: 1.6;
        }
        .login-btn {
            display: inline-block;
            padding: 12px 24px;
            background: #667eea;
            color: white;
            text-decoration: none;
            border-radius: 8px;
            transition: background 0.3s;
        }
        .login-btn:hover {
            background: #5a67d8;
        }
    </style>
</head>
<body>
    <div class="success-container">
        <div class="success-icon">‚úÖ</div>
        <div class="success-title">Ë®ªÂÜäÊàêÂäüÔºÅ</div>
        <div class="success-message">
            Ê≠°Ëøé %sÔºÅ<br>
            ÊÇ®ÁöÑÂ∏≥ËôüÂ∑≤ÊàêÂäüÂâµÂª∫„ÄÇË´ã‰ΩøÁî®ÊÇ®ÁöÑÁî®Êà∂ÂêçÂíåÂØÜÁ¢ºÁôªÈåÑ„ÄÇ
        </div>
        <a href="%s" class="login-btn">ÂâçÂæÄÁôªÈåÑ</a>
    </div>
</body>
</html>`, a.config.Title, username, a.config.LoginRoute)
}
